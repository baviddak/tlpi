Chapter Summary
---------------
Each process has a number of associated user and group IDs (credentials). The real IDs define the ownership of the process. On most UNIX implmentations, the effective IDs are used to determine a process's permissions when accessing resources such as files. On Linux, however, the file-system IDs are user for determining permissions for accessing files, while the effective IDs are used for other permission checks. (Because the file-system IDs normally have the same values the corresponding effective IDs, Linux behaves in the same way as other UNIX implementations when checking file permissions.) A process's supplementary group IDs are a further set of groups of which the process is considered to be a member for the purpose of permission checking. Various system calls and library functions allow a process to retrieve and change its user and group IDs.
When a set-user-ID program is run, the effective user ID of the process is set to that of the owner of the file. This mechanism allows a user to assume the identity, and thus the privledges, of another user while running a particular program. Correspondigly, set-group-ID programs change the effective group ID of the process running a program. The saved set-user-ID and saved set-group-ID allow set-user-ID and set-group-ID programs to temporarily drop and then later reassume privledges.
The user ID 0 is special. Normally, a single user account, named root, has this user ID. Processes with an effectife user ID of 0 are privledged - that is, the are exempt from many of the permission checks normally performed when a process makes various system calls (such as those used to arbitrarily change the various process user and group IDs).