/* Implement readv() and writev() using read(), write() and suitable functions from the malloc package (Section 7.1.2). */

/* Usage: my_readv_writev inputfile outputfile - all the contents from input file are transferred over to output file but first are put into memory via my_readv and my_writev */


#include <sys/stat.h>
/* #include <sys/uio.h> */
#include <fcntl.h>

#include "tlpi_hdr.h"


struct iovec{
  void *iov_base;   /* start address of buffer */
  size_t iov_len;   /* Number of bytes to transfer to/from buffer */
};

ssize_t my_readv(int fd, const struct iovec *iov, int iovcnt){

  /* Will have to use malloc and free for the read funciton */
    
  return(1);
}

ssize_t my_writev(int fd, const struct iovec *iov, int iovcnt){
  int num_written;
  int total_written = 0;
  /* May need to do a fcntl to make sure that the O_APPEND flag is set */

  /* loop through the iov struct and write the buffers to the file */
  for (int i=0; i<iovcnt; i++){
    if((num_written = write(fd, (char *)iov[i].iov_base, iov[i].iov_len)) == -1){
      return(-1);
    }
    if(num_written < iov[i].iov_len){
      return(-1);
    }
    total_written += num_written;
    num_written = 0;
  }
  return(total_written);
}

int main(int argc, char * argv[]){
  /* First argument is input file, second argument is output file  */

  /* Get the size of the input file, divide it by the number of buffers that are wanted in the iovec struct */

  if(argc != 3 || strcmp(argv[1], "--help") == 0){
    usageErr("%s input_file output_file\n", argv[0]);
  }

  int tot_bytes_to_write = 0;
  /* The input iovec array can be as follows  */
  struct iovec iov[4];
  char * elem_0 = "My love for you is strong.\n I am the one to show you the way";
  char elem_1 = 'x';
  int elem_2 = 1234;
  char * elem_3 = "When will we know the path to love\n";


  iov[0].iov_base = elem_0;
  iov[0].iov_len = sizeof(elem_0);

  iov[1].iov_base = &elem_1;
  iov[1].iov_len = sizeof(elem_1);

  iov[2].iov_base = &elem_2;
  iov[2].iov_len = sizeof(elem_2);

  iov[3].iov_base = elem_3;
  iov[3].iov_len = sizeof(elem_3);
  
  
  
  
  
  /* Remember to close the file descriptors */
  return(EXIT_SUCCESS);
}
